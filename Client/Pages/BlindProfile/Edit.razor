@page "/blindprofile/edit/{BlindProfileId:int}"
@inject HttpClient _httpClient
@inject NavigationManager _uriHelper
@inject IJSRuntime _js

@using workings.Shared

<h3>Edit</h3>
@if (_blindProfile == null)
{
    <text>Loading...</text>
}
else
{
    <Form
        ButtonText="Update"
        BlindProfile="_blindProfile"
        OnValidSubmit="@EditBlindProfile">
    </Form>
}

@code {

    [Parameter]
    public int BlindProfileId { get; set; }

    BlindProfile _blindProfile;

    protected override async Task OnParametersSetAsync()
    {
        _blindProfile = await _httpClient.GetFromJsonAsync<BlindProfile>(
            $"api/blindProfile/{BlindProfileId}"
            );
    }

    async Task EditBlindProfile()
    {
        try
        {
            await _httpClient.PutAsJsonAsync("api/blindProfile", _blindProfile);
            await _js.InvokeVoidAsync("alert", $"Updated Successfully!");
            _uriHelper.NavigateTo("blindprofile");
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

}