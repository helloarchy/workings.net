@using System.Diagnostics
@using System.Reflection
@using System.Collections
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@using workings.Client.Components
@using workings.Shared

@attribute [Authorize]
@inject HttpClient _httpClient

@if (BlindProfile == null)
{
    <text>Loading...</text>
}
else
{
    <EditForm OnValidSubmit="@OnValidSubmit" Model="@BlindProfile">
        <DataAnnotationsValidator/>

        @* Details *@
        <FieldGroup Title="Details">
            <FormField Title="Name">
                <InputText class="@_cssText" @bind-Value="@BlindProfile.Name"/>
                <ValidationMessage For="@(() => BlindProfile.Name)"/>
            </FormField>
        </FieldGroup>

        @* Default Values *@
        <FieldGroup Title="Default Values">
            @* Business Client *@
            <FormField Title="Business Client">
                <InputSelect class="@_cssSelect" @bind-Value="BlindProfile.BusinessClientId">
                    @if (_businessClients != null)
                    {
                        @foreach (var businessClient in _businessClients)
                        {
                            @if (businessClient.Id == BlindProfile.BusinessClientId)
                            {
                                <option selected value="@businessClient.Id">@businessClient.Name</option>
                            }
                            else
                            {
                                <option value="@businessClient.Id">@businessClient.Name</option>
                            }
                        }
                    }
                </InputSelect>
            </FormField>

            @* BlindRailing *@
            <FormField Title="Railing Type">
                <InputSelect class="@_cssSelect" @bind-Value="BlindProfile.BlindRailingId">
                    @if (_blindRailings != null)
                    {
                        foreach (var blindRailing in _blindRailings)
                        {
                            @if (blindRailing.Id == BlindProfile.BlindRailingId)
                            {
                                <option selected value="@blindRailing.Id">@blindRailing.Name</option>
                            }
                            else
                            {
                                <option value="@blindRailing.Id">@blindRailing.Name</option>
                            }
                        }
                    }
                </InputSelect>
            </FormField>

            @* Blind Stack *@
            <FormField Title="Stack Type">
                <InputSelect class="@_cssSelect" @bind-Value="BlindProfile.BlindStackId">
                    @if (_blindStacks != null)
                    {
                        foreach (var blindStack in _blindStacks)
                        {
                            @if (blindStack.Id == BlindProfile.BlindStackId)
                            {
                                <option selected value="@blindStack.Id">@blindStack.Name</option>
                            }
                            else
                            {
                                <option value="@blindStack.Id">@blindStack.Name</option>
                            }
                        }
                    }
                </InputSelect>
            </FormField>
        </FieldGroup>

        <button type="submit" class="btn btn-success">
            @ButtonText
        </button>
    </EditForm>
}

@code {

    [Parameter]
    public BlindProfile BlindProfile { get; set; }

    [Parameter]
    public string ButtonText { get; set; } = "Save";

    [Parameter]
    public EventCallback OnValidSubmit { get; set; }

    private BusinessClient[] _businessClients;
    private BlindRailing[] _blindRailings;
    private BlindStack[] _blindStacks;

    private string _cssSelect = "form-select block mt-1 w-full";
    private string _cssText = "form-input block mt-1 w-full";

    protected override async Task OnInitializedAsync()
    {
        try
        {
            _businessClients = await _httpClient.GetFromJsonAsync<BusinessClient[]>("api/businessClient");
            _blindRailings = await _httpClient.GetFromJsonAsync<BlindRailing[]>("api/blindRailing");
            _blindStacks = await _httpClient.GetFromJsonAsync<BlindStack[]>("api/blindStack");
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }
    }

}