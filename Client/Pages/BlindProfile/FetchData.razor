@page "/blindProfile"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using workings.Shared;

@attribute [Authorize]

@inject HttpClient _httpClient
@inject IJSRuntime _js

<h3>Blind Profiles</h3>
<small>Add as many Blind Profiles as you wish.</small>
<div class="form-group">
    <a class="btn btn-success" href="blindProfile/create"><i class="oi oi-plus"></i> Create New</a>
</div>
<br>

@if (BlindProfiles == null)
{
    <text>Loading...</text>
}
else if (BlindProfiles.Length == 0)
{
    <text>Add Blind Profiles to view them all here.</text>
}
else
{
    <div class="overflow-x-auto w-full">
        <table class="mx-auto max-w-4xl w-full whitespace-nowrap rounded-lg 
                        bg-white divide-y divide-gray-300 overflow-hidden">
            <thead class="bg-gray-50">
            <tr class="text-left">
                <th class="font-semibold text-sm uppercase px-6 py-4">Id</th>
                <th class="font-semibold text-sm uppercase px-6 py-4">Name</th>
                <th class="font-semibold text-sm uppercase px-6 py-4">Business Client</th>
                <th class="font-semibold text-sm uppercase px-6 py-4">Railing Type</th>
                <th class="font-semibold text-sm uppercase px-6 py-4">Railing Height</th>
                <th class="font-semibold text-sm uppercase px-6 py-4">Stack Name</th>
                <th class="font-semibold text-sm uppercase px-6 py-4">Stack Type</th>
                <th class="font-semibold text-sm uppercase px-6 py-4">Stack Offset</th>
                <th class="font-semibold text-sm uppercase px-6 py-4">Bottom Bar Type</th>
                <th class="font-semibold text-sm uppercase px-6 py-4">Bottom Bar Height</th>
                <th>@* Edit / Delete *@</th>
            </tr>
            </thead>
            <tbody class="divide-y divide-gray-200">
            @foreach (var blindProfile in BlindProfiles)
            {
                <tr>
                    <td class="px-6 py-4">@blindProfile.Id</td>
                    <td class="px-6 py-4">@blindProfile.Name</td>
                    <td class="px-6 py-4">@blindProfile.BusinessClient.Name</td>
                    <td class="px-6 py-4">@blindProfile.BlindRailing.Name</td>
                    <td class="px-6 py-4">@blindProfile.BlindRailing.Height</td>
                    <td class="px-6 py-4">@blindProfile.BlindStack.Name</td>
                    <td class="px-6 py-4">@blindProfile.BlindStack.Type</td>
                    <td class="px-6 py-4">@blindProfile.BlindStack.Offset</td>
                    <td class="px-6 py-4">@blindProfile.BlindBottomBar.Name</td>
                    <td class="px-6 py-4">@blindProfile.BlindBottomBar.Height</td>
                    <td class="px-6 py-4">
                        <a class="text-blue-800 hover:underline" href="blindProfile/edit/@blindProfile.Id">Edit</a>
                        <button class="text-red-800 hover:underline ml-4" @onclick="@(() => Delete(blindProfile.Id))">Delete</button>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
}

@code {
    BlindProfile[] BlindProfiles { get; set; }

    protected override async Task OnInitializedAsync()
    {
        BlindProfiles = await _httpClient.GetFromJsonAsync<BlindProfile[]>(
            "api/blindprofile"
            );
        
        Console.WriteLine("DEBUG => Blind profiles...");
        if (BlindProfiles != null)
        {
            Console.WriteLine(BlindProfiles.Length);
        }
        else
        {
            Console.WriteLine("DEBUG => No profiles...");
        }
    }

    async Task Delete(int id)
    {
        var blindProfile = BlindProfiles.First(x => x.Id == id);
        var confirmDelete = await _js.InvokeAsync<bool>(
            "confirm",
            $"Do you want to delete {blindProfile.Name}'s ({blindProfile.Id}) Record?"
            );

        if (confirmDelete)
        {
            await _httpClient.DeleteAsync($"api/blindProfile/{id}");
            await OnInitializedAsync();
        }
    }

}