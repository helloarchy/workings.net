@page "/blindProfile"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication
@using workings.Shared;

@attribute [Authorize]

@inject HttpClient _httpClient
@inject IJSRuntime _js

<h3>Blind Profiles</h3>
<small>Add as many Blind Profiles as you wish.</small>
<div class="form-group">
    <a class="btn btn-success" href="blindProfile/create"><i class="oi oi-plus"></i> Create New</a>
</div>
<br>

@if (BlindProfiles == null)
{
    <text>Loading...</text>
}
else if (BlindProfiles.Length == 0)
{
    <text>Add Blind Profiles to view them all here.</text>
}
else
{
    <table class="table-auto">
        <thead>
        <tr>
            <th>Id</th>
            <th>Name</th>
            <th>Business Client</th>
            <th>Railing Type</th>
            <th>Railing Height</th>
            <th>Stack Name</th>
            <th>Stack Type</th>
            <th>Stack Offset</th>
            <th>Bottom Bar Type</th>
            <th>Bottom Bar Height</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var blindProfile in BlindProfiles)
        {
            <tr>
                <td>@blindProfile.Id</td>
                <td>@blindProfile.Name</td>
                <td>@blindProfile.BusinessClient.Name</td>
                <td>@blindProfile.BlindRailing.Name</td>
                <td>@blindProfile.BlindRailing.Height</td>
                <td>@blindProfile.BlindStack.Name</td>
                <td>@blindProfile.BlindStack.Type</td>
                <td>@blindProfile.BlindStack.Offset</td>
                <td>@blindProfile.BlindBottomBar.Name</td>
                <td>@blindProfile.BlindBottomBar.Height</td>
                <td>
                    <a class="btn btn-success" href="blindProfile/edit/@blindProfile.Id">Edit</a>
                    <button class="btn btn-danger" @onclick="@(() => Delete(blindProfile.Id))">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    BlindProfile[] BlindProfiles { get; set; }

    protected override async Task OnInitializedAsync()
    {
        BlindProfiles = await _httpClient.GetFromJsonAsync<BlindProfile[]>(
            "api/blindProfile"
            );
    }

    async Task Delete(int id)
    {
        var blindProfile = BlindProfiles.First(x => x.Id == id);
        var confirmDelete = await _js.InvokeAsync<bool>(
            "confirm",
            $"Do you want to delete {blindProfile.Name}'s ({blindProfile.Id}) Record?"
            );

        if (confirmDelete)
        {
            await _httpClient.DeleteAsync($"api/blindProfile/{id}");
            await OnInitializedAsync();
        }
    }

}