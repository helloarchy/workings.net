@page "/businessclient"

@inject HttpClient _httpClient
@inject IJSRuntime _js

<h3>Business Clients</h3>
<small>Add as many Business Clients as you wish.</small>
<div class="form-group">
    <a class="btn btn-success" href="businessClient/create">
        <i class="oi oi-plus"></i> Create New
    </a>
</div>
<br>

@if (BusinessClients == null)
{
    <text>Loading...</text>
}
else if (BusinessClients.Length == 0)
{
    <text>Add business clients to view them all here.</text>
}
else
{
    <table class="table table-striped">
        <thead>
        <tr>
            <th>Id</th>
            <th>Name</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var businessClient in BusinessClients)
        {
            <tr>
                <td>@businessClient.Id</td>
                <td>@businessClient.Name</td>
                <td>
                    <a class="btn btn-success" href="businessClient/edit/@businessClient.Id">
                        Edit
                    </a>
                    <button class="btn btn-danger" @onclick="@(() => Delete(businessClient.Id))">
                        Delete
                    </button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    BusinessClient[] BusinessClients { get; set; }

    protected override async Task OnInitializedAsync()
    {
        BusinessClients = await _httpClient.GetFromJsonAsync<BusinessClient[]>(
            "api/businessClient"
            );
    }

    async Task Delete(int Id)
    {
        var businessClient = BusinessClients.First(x => x.Id == Id);
        var confirmDelete = await _js.InvokeAsync<bool>(
            "confirm",
            $"Do you want to delete {businessClient.Name}'s ({businessClient.Id}) Record?"
            );

        if (confirmDelete)
        {
            await _httpClient.DeleteAsync($"api/businessClient/{Id}");
            await OnInitializedAsync();
        }
    }

}