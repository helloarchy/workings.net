@page "/bottomBar"

@inject HttpClient _httpClient
@inject IJSRuntime _js

<h3>BottomBars</h3>
<small>Add as many bottomBars as you wish.</small>
<div class="form-group">
    <a class="btn btn-success" href="bottomBar/create"><i class="oi oi-plus"></i> Create New</a>
</div>
<br>

@if (BlindBottomBars == null)
{
    <text>Loading...</text>
}
else if (BlindBottomBars.Length == 0)
{
    <text>Add bottomBars to view them all here.</text>
}
else
{
    <table class="table-auto">
        <thead>
        <tr>
            <th>Id</th>
            <th>Name</th>
            <th>Height (cm)</th>
            <th></th>
        </tr>
        </thead>
        <tbody>
        @foreach (var bottomBar in BlindBottomBars)
        {
            <tr>
                <td>@bottomBar.Id</td>
                <td>@bottomBar.Name</td>
                <td>@bottomBar.Height</td>
                <td>
                    <a class="btn btn-success" href="bottomBar/edit/@bottomBar.Id">Edit</a>
                    <button class="btn btn-danger" @onclick="@(() => Delete(bottomBar.Id))">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    BlindBottomBar[] BlindBottomBars { get; set; }

    protected override async Task OnInitializedAsync()
    {
        BlindBottomBars = await _httpClient.GetFromJsonAsync<BlindBottomBar[]>("api/blindBottomBar");
    }

    async Task Delete(int Id)
    {
        var blindBottomBar = BlindBottomBars.First(x => x.Id == Id);
        var confirmDelete = await _js.InvokeAsync<bool>(
            "confirm",
            $"Do you want to delete {blindBottomBar.Name}'s ({blindBottomBar.Id}) Record?"
            );
        
        if (confirmDelete)
        {
            await _httpClient.DeleteAsync($"api/blindBottomBar/{Id}");
            await OnInitializedAsync();
        }
    }

}