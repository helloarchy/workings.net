@using System.Diagnostics
@using System.Reflection
@using System.Collections
@using System.Text.Json
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@using Workings.Shared

@attribute [Authorize]

@inject HttpClient _httpClient

@if (_blindProfiles == null)
{
    <text>Loading...</text>
}
else
{
    <EditForm Model="BlindModel" OnValidSubmit="@(() => OnSubmit.InvokeAsync(BlindModel))">
        <MudCard>
            <DataAnnotationsValidator/>
            <ValidationSummary/>

            <MudCardContent>
                @* Blind Profile *@
                <FieldGroup Title="Preset">
                    <MudItem>
                        <MudSelect T="int" ValueChanged="UpdateBlindProfile"
                                   Label="Default Profile" Strict="true"
                                   Variant="Variant.Text" Format="F2">
                            @if (_blindProfiles != null)
                            {
                                foreach (var bp in _blindProfiles)
                                {
                                    <MudSelectItem Value="@bp.Id">@bp.Name</MudSelectItem>
                                }
                            }
                        </MudSelect>
                    </MudItem>
                </FieldGroup>

                @* Details *@
                <FieldGroup Title="Details">
                    <MudItem>
                        <MudSelect T="BusinessClient" @bind-Value="BlindModel.BusinessClient"
                                   For="() => BlindModel.BusinessClient"
                                   ToStringFunc="@(bc => bc.Name)"
                                   Label="Business Client" Strict="true"
                                   Variant="Variant.Text" Format="F2">
                            @foreach (var bc in _businessClients)
                            {
                                <MudSelectItem Value="@bc"/>
                            }
                        </MudSelect>
                    </MudItem>

                    <MudItem>
                        <MudTextField @bind-Value="BlindModel.Customer" Label="Customer"
                                      Variant="Variant.Text" For="() => BlindModel.Customer"/>
                    </MudItem>

                    <MudItem>
                        <MudTextField @bind-Value="BlindModel.Reference" Label="Reference"
                                      Variant="Variant.Text" For="() => BlindModel.Reference"/>
                    </MudItem>

                    <MudItem>
                        <MudNumericField @bind-Value="BlindModel.CountBlinds" Label="No. Blinds"
                                         Variant="Variant.Text" Min="1" For="() => BlindModel.CountBlinds"/>
                    </MudItem>
                </FieldGroup>

                @* Dimensions *@
                <FieldGroup Title="Dimensions">
                    <MudItem>
                        <MudNumericField @bind-Value="BlindModel.Width" Label="Width" Step="0.01"
                                         Variant="Variant.Text" For="() => BlindModel.Width"/>
                    </MudItem>

                    <MudItem>
                        <MudNumericField @bind-Value="BlindModel.Height" Label="Height" Step="0.01"
                                         Variant="Variant.Text" For="() => BlindModel.Height"/>
                    </MudItem>

                    <MudItem>
                        <MudNumericField @bind-Value="BlindModel.CountWidths" Label="No. Widths"
                                         Variant="Variant.Text" Min="1" For="() => BlindModel.CountBlinds"/>
                    </MudItem>
                </FieldGroup>

                @* BlindRailing *@
                <FieldGroup Title="BlindRailing">
                    <MudItem>
                        <MudSelect T="BlindRailing" @bind-Value="BlindModel.BlindRailing"
                                   For="() => BlindModel.BlindRailing"
                                   ToStringFunc="br => br.Name"
                                   Label="Blind Railing" Strict="true"
                                   Variant="Variant.Text" Format="F2">
                            @foreach (var br in _blindRailings)
                            {
                                <MudSelectItem Value="@br"/>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem>
                        <MudNumericField @bind-Value="BlindModel.BlindRailing.Height"
                                         Label="Height" Variant="Variant.Text"
                                         For="() => BlindModel.BlindRailing.Height"/>
                    </MudItem>
                </FieldGroup>

                @* Blind Rod *@
                <FieldGroup Title="Blind Rod">
                    <MudItem>
                        <MudSelect T="BlindRod" @bind-Value="BlindModel.BlindRod"
                                   For="() => BlindModel.BlindRod"
                                   ToStringFunc="br => br.Name"
                                   Label="Blind Rod Type" Strict="true"
                                   Variant="Variant.Text" Format="F2">
                            @foreach (var br in _blindRods)
                            {
                                <MudSelectItem Value="@br"/>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem>
                        <MudNumericField @bind-Value="BlindModel.BlindRod.Height"
                                         Label="Height" Variant="Variant.Text"
                                         For="() => BlindModel.BlindRod.Height"/>
                    </MudItem>
                </FieldGroup>

                @* Stack *@
                <FieldGroup Title="Stack">
                    <MudItem>
                        <MudSelect T="BlindStackType" @bind-Value="BlindModel.BlindStack.Type"
                                   For="() => BlindModel.BlindStack.Type"
                                   Label="Stack Type" Strict="true"
                                   Variant="Variant.Text" Format="F2">
                            @foreach (var stackType in Enum.GetValues<BlindStackType>())
                            {
                                <MudSelectItem Value="@stackType"/>
                            }
                        </MudSelect>
                    </MudItem>
                    @if (BlindModel.BlindStack.Type is BlindStackType.Waterfall)
                    {
                        <MudItem>
                            <MudNumericField @bind-Value="BlindModel.BlindStack.Offset"
                                             Label="Waterfall Increment" Variant="Variant.Text"
                                             For="() => BlindModel.BlindStack.Offset"/>
                        </MudItem>
                    }
                    @if (BlindModel.BlindStack.Type is BlindStackType.Reveal)
                    {
                        <MudItem>
                            <MudNumericField @bind-Value="BlindModel.BlindStack.Offset"
                                             Label="Reveal" Variant="Variant.Text"
                                             For="() => BlindModel.BlindStack.Offset"/>
                        </MudItem>
                    }
                    <MudItem>
                        <MudNumericField @bind-Value="BlindModel.Folds"
                                         Label="Folds" Variant="Variant.Text"
                                         For="() => BlindModel.Folds"/>
                    </MudItem>
                </FieldGroup>

                @* Inner Lining *@
                <FieldGroup Title="Linings">
                    <MudItem>
                        <MudSelect T="BlindLining" @bind-Value="BlindModel.BlindInnerLining"
                                   For="() => BlindModel.BlindInnerLining"
                                   ToStringFunc="bl => bl.Name"
                                   Label="Interlining" Strict="true"
                                   Variant="Variant.Text" Format="F2">
                            @foreach (var bl in _blindInnerLinings)
                            {
                                <MudSelectItem Value="@bl"/>
                            }
                        </MudSelect>
                    </MudItem>
                    <MudItem>
                        <MudSelect T="BlindLining" @bind-Value="BlindModel.BlindOuterLining"
                                   For="() => BlindModel.BlindOuterLining"
                                   ToStringFunc="bl => bl.Name"
                                   Label="Lining" Strict="true"
                                   Variant="Variant.Text" Format="F2">
                            @foreach (var bl in _blindOuterLinings)
                            {
                                <MudSelectItem Value="@bl"/>
                            }
                        </MudSelect>
                    </MudItem>
                </FieldGroup>
            </MudCardContent>

            <MudCardActions>
                <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Class="ml-auto">
                    Generate
                </MudButton>
            </MudCardActions>
        </MudCard>
    </EditForm>
}


@code {

    [Parameter]
    public BlindModel BlindModel { get; set; }

    [Parameter]
    public EventCallback<BlindModel> OnSubmit { get; set; }

    private EditContext _editContext = null;

    private BlindProfile[] _blindProfiles;
    private BusinessClient[] _businessClients;
    private BlindRailing[] _blindRailings;
    private BlindRod[] _blindRods;
    private BlindStack[] _blindStacks;
    private BlindLining[] _blindInnerLinings;
    private BlindLining[] _blindOuterLinings;

    protected override async Task OnInitializedAsync()
    {
        _editContext = new EditContext(BlindModel);
        _editContext.OnFieldChanged += EditContext_OnFieldChanged;

        try
        {
            _blindProfiles = await _httpClient.GetFromJsonAsync<BlindProfile[]>("api/blindprofile");
            _businessClients = await _httpClient.GetFromJsonAsync<BusinessClient[]>("api/businessclient");
            _blindRailings = await _httpClient.GetFromJsonAsync<BlindRailing[]>("api/blindrailing");
            _blindRods = await _httpClient.GetFromJsonAsync<BlindRod[]>("api/blindrod");
            _blindStacks = await _httpClient.GetFromJsonAsync<BlindStack[]>("api/blindstack");
            _blindInnerLinings = await _httpClient.GetFromJsonAsync<BlindLining[]>("api/blindlining/inner");
            _blindOuterLinings = await _httpClient.GetFromJsonAsync<BlindLining[]>("api/blindlining/outer");

            if (_blindProfiles != null) ApplyBlindProfile(_blindProfiles.First());
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

        await base.OnInitializedAsync();
    }

    private void EditContext_OnFieldChanged(object sender, FieldChangedEventArgs e)
    {
    /* Blind railing select change blind railing height */
        if (e.FieldIdentifier.FieldName == "BlindRailingId")
        {
            var blindRailing = _blindRailings?.FirstOrDefault(railing => railing.Id == BlindModel.BlindRailingId);
            if (blindRailing != null)
            {
                BlindModel.BlindRailing = blindRailing;
            }
        }

    /* Blind rod select change blind rod height */
        if (e.FieldIdentifier.FieldName == "BlindRodId")
        {
            var blindRod = _blindRods?.FirstOrDefault(rod => rod.Id == BlindModel.BlindRodId);
            if (blindRod != null)
            {
                BlindModel.BlindRod = blindRod;
            }
        }

    /* Blind stack select change blind stack offset */
        if (e.FieldIdentifier.FieldName == "BlindStackId")
        {
            var blindStack = _blindStacks?.FirstOrDefault(stack => stack.Id == BlindModel.BlindStackId);
            if (blindStack != null)
            {
                BlindModel.BlindStack = blindStack;
            }
        }

    /* Blind inner lining select change blind inner lining */
        if (e.FieldIdentifier.FieldName == "BlindInnerLiningId")
        {
            var blindInnerLining = _blindInnerLinings?.FirstOrDefault(
                lining => lining.Id == BlindModel.BlindInnerLiningId
                );
            if (blindInnerLining != null)
            {
                BlindModel.BlindInnerLining = blindInnerLining;
            }
        }

    /* Blind outer lining select change blind outer lining */
        if (e.FieldIdentifier.FieldName == "BlindOuterLiningId")
        {
            var blindOuterLining = _blindOuterLinings?.FirstOrDefault(
                lining => lining.Id == BlindModel.BlindOuterLiningId
                );
            if (blindOuterLining != null)
            {
                BlindModel.BlindOuterLining = blindOuterLining;
            }
        }

    /* Business client select change business client */
        if (e.FieldIdentifier.FieldName == "BusinessClientId")
        {
            var businessClient = _businessClients?.FirstOrDefault(
                client => client.Id == BlindModel.BusinessClientId
                );
            if (businessClient != null)
            {
                BlindModel.BusinessClient = businessClient;
            }
        }
    }


    private void ApplyBlindProfile(BlindProfile blindProfile)
    {
        if (BlindModel == null)
        {
            BlindModel = new BlindModel
            {
                BusinessClientId = blindProfile.BusinessClientId,
                BusinessClient = _businessClients.FirstOrDefault(
                    client => client.Id == blindProfile.BusinessClientId
                    ),
                BlindRailingId = blindProfile.BlindRailingId,
                BlindRailing = _blindRailings.FirstOrDefault(
                    br => br.Id == blindProfile.BlindRailingId
                    ),
                BlindRodId = blindProfile.BlindRodId,
                BlindRod = _blindRods.FirstOrDefault(
                    rod => rod.Id == blindProfile.BlindRodId),
                BlindStackId = blindProfile.BlindStackId,
                BlindStack = _blindStacks.FirstOrDefault(
                    bs => bs.Id == blindProfile.BlindStackId
                    )
            };
        }
        else
        {
            BlindModel.BusinessClientId = blindProfile.BusinessClientId;
            BlindModel.BusinessClient = _businessClients.FirstOrDefault(
                client => client.Id == blindProfile.BusinessClientId
                );

            BlindModel.BlindRailingId = blindProfile.BlindRailingId;
            BlindModel.BlindRailing = _blindRailings.FirstOrDefault(
                railing => railing.Id == blindProfile.BlindRailingId
                );

            BlindModel.BlindRodId = blindProfile.BlindRodId;
            BlindModel.BlindRod = _blindRods.FirstOrDefault(
                rod => rod.Id == blindProfile.BlindRodId);

            BlindModel.BlindStackId = blindProfile.BlindStackId;
            BlindModel.BlindStack = _blindStacks.FirstOrDefault(
                stack => stack.Id == blindProfile.BlindStackId
                );
        }
    }


    private void UpdateBlindProfile(int value)
    {
        Console.WriteLine($"DEBUG => Arg is {value}");

        Console.WriteLine($"DEBUG => Blind profile length is {_blindProfiles.Length}");
        var blindProfile = _blindProfiles.FirstOrDefault(bp => bp.Id == value);

        if (blindProfile != null && blindProfile.Id != value) throw new Exception($"No profile found for id {value}!");
        ApplyBlindProfile(blindProfile);
    }

}