@using Workings.Client.Components.Drawing

@* <svg viewBox="0 0 @MaxWidth @MaxHeight" preserveAspectRatio="xMinYMin meet" height="100%"> *@
<svg viewBox="0 0 @MaxWidth @MaxHeight" width="100%">
    <marker id="arrow" viewBox="0 0 10 10" refX="5" refY="5"
            markerWidth="6" markerHeight="6"
            orient="auto-start-reverse">
        <path d="M 0 0 L 10 5 L 0 10 z"/>
    </marker>

    @for (var i = 0; i < BlindModel.Folds; i++)
    {
        <DrawingFoldSection StrokeWidth="@_pathStrokeWidth" PleatHeight="@_pleatHeight"
                            StartX="@(_xEdgeOffset)" StartY="@(i * _pleatHeight * 2)"
                            XLineLength="@_xLineLength"/>
    }
    <DrawingFoldSectionFinal StrokeWidth="@_pathStrokeWidth" PleatHeight="@_pleatHeight"
                             StartX="@(_xEdgeOffset)" StartY="@(_finalFoldStartY)"
                             XLineLength="@_xLineLength"/>
</svg>

@code {

    [Parameter]
    public BlindModel BlindModel { get; set; }

    private int _pathStrokeWidth = 2;
    private int _pleatHeight;
    private int _xEdgeOffset = 10;
    private int _finalFoldStartY;
    private int _xLineLength = 300;

        private const int MaxWidth = 300;
        private const int MaxHeight = 400;

    protected override void OnParametersSet()
    {
        _pleatHeight = (int) ((MaxHeight - 100) / ((BlindModel.Folds * 2) + 1));
        _finalFoldStartY = BlindModel.Folds * _pleatHeight * 2;
        Console.WriteLine($"DEBUG => Drawing: Final fold start = {_finalFoldStartY}");
        Console.WriteLine($"DEBUG => Drawing: Pleat height = {_pleatHeight}");
    }

}