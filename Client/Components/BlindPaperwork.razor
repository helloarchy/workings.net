@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.WebAssembly.Authentication

@using workings.Client.Components.Drawing;
@using workings.Client.Components.Paperwork;

@attribute [Authorize]

@inject HttpClient _httpClient

<h3>Blind Paperwork</h3>
@* Aspect ratio of an A4 page *@
<div class="aspect-w-3 aspect-h-4 ">
    <div class="border w-full">
        <div class="flex flex-col flex-nowrap">
            <div class="flex-none">
                <PaperworkDetails BlindModel="@BlindModel"/>
            </div>
            <div class="flex-grow">
                <Drawing BlindModel="@BlindModel"/>
            </div>
            <div class="flex-none">
                <PaperworkCutLengths BlindModel="@BlindModel" />
            </div>
            <div class="flex-none">
                <h3>Disclaimer</h3>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter]
    public BlindModel BlindModel { get; set; }

    private BusinessClient _businessClient = new();
    private BlindRailing _blindRailing = new();

    protected override async Task OnParametersSetAsync()
    {
    /* Fetch required objects */
        try
        {
            _businessClient = await _httpClient.GetFromJsonAsync<BusinessClient>(
                $"api/businessclient/{BlindModel.BusinessClientId}"
                );

            _blindRailing = await _httpClient.GetFromJsonAsync<BlindRailing>(
                $"api/blindRailing/{BlindModel.BlindRailingId}"
                );
        }
        catch (AccessTokenNotAvailableException exception)
        {
            exception.Redirect();
        }

    /* Calculate everything */
    }

}